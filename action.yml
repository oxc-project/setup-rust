name: Rustup

description: Setup Rust with caching

inputs:
  # See https://rust-lang.github.io/rustup/concepts/components.html
  components:
    required: false
    type: string
    description: space separated Rust components, e.g. `clippy rustfmt rust-docs`

  tools:
    required: false
    type: string
    description: comma separated Cargo tools

  restore-cache:
    default: true
    required: false
    type: boolean
    description: whether to restore cache

  save-cache:
    default: false
    required: false
    type: boolean
    description: whether to save cache, e.g. `github.ref_name == 'main'`

  cache-key:
    default: 'main'
    required: false
    type: string
    description: cache key prefix

  cache-workspace-crates:
    default: false
    required: false
    description: "Similar to cache-all-crates. If `true` the workspace crates will be cached."

runs:
  using: composite
  steps:
    - name: Print Inputs
      shell: bash
      run: |
        echo 'components: ${INPUTS_COMPONENTS}'
        echo 'tools: ${INPUTS_TOOLS}'
        echo 'restore-cache: ${INPUTS_RESTORE_CACHE}'
        echo 'save-cache: ${INPUTS_SAVE_CACHE}'
        echo 'cache-key: ${INPUTS_CACHE_KEY}'
      env:
        INPUTS_COMPONENTS: ${{ inputs.components }}
        INPUTS_TOOLS: ${{ inputs.tools }}
        INPUTS_RESTORE_CACHE: ${{ inputs.restore-cache }}
        INPUTS_SAVE_CACHE: ${{ inputs.save-cache }}
        INPUTS_CACHE_KEY: ${{ inputs.cache-key }}

    - name: Change to minimal profile
      shell: bash
      run: |
        sed -i ${{ (runner.os == 'macOS' && '""') || '' }} -e 's/profile = "default"/profile = "minimal"/g' rust-toolchain.toml
        cat rust-toolchain.toml

    - name: Set Minimal Profile
      shell: bash
      run: rustup set profile minimal

    - name: Add Components
      shell: bash
      if: ${{ inputs.components }}
      run: rustup component add ${INPUTS_COMPONENTS}
      env:
        INPUTS_COMPONENTS: ${{ inputs.components }}

    - name: Install
      shell: bash
      run: |
        rustup show
        git restore . # restore rust-toolchain.toml change

    - name: Cache on ${{ github.ref_name }}
      uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
      if: ${{ inputs.restore-cache == 'true' }}
      with:
        shared-key: ${{ inputs.cache-key }}
        save-if: ${{ inputs.save-cache == 'true' }}
        cache-workspace-crates: ${{ inputs.cache-workspace-crates }}

    - name: Install Tools
      uses: taiki-e/install-action@0aa4f22591557b744fe31e55dbfcdfea74a073f7 # v2.61.10
      if: ${{ inputs.tools }}
      with:
        tool: ${{ inputs.tools }}

    # `cargo codspeed run` takes time to download `valgrind-codspeed` (20MB), cache it.
    # https://github.com/CodSpeedHQ/runner/blob/v4.0.1/src/run/runner/valgrind/setup.rs
    - name: Cache Valgrind .deb package
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # 4.3.0
      id: cache-valgrind
      if: ${{ runner.os == 'Linux' && contains(inputs.tools, 'cargo-codspeed') }}
      with:
        path: ~/valgrind-codspeed.deb
        key: valgrind-3.24.0-0codspeed1-ubuntu-24.04

    - name: Download Valgrind
      if: ${{ runner.os == 'Linux' && contains(inputs.tools, 'cargo-codspeed') && steps.cache-valgrind.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        curl -L https://github.com/CodSpeedHQ/valgrind-codspeed/releases/download/3.24.0-0codspeed1/valgrind_3.24.0-0codspeed1_ubuntu-24.04_amd64.deb \
          -o ~/valgrind-codspeed.deb

    # `cargo codspeed run` takes 1-2 minutes to run `cargo-codspeed`
    - name: Install Valgrind
      if: ${{ runner.os == 'Linux' && contains(inputs.tools, 'cargo-codspeed') }}
      shell: bash
      run: sudo apt-get install --allow-downgrades -y ~/valgrind-codspeed.deb
